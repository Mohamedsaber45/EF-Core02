// <auto-generated />
using System;
using EF_Core02.Data.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EF_Core02.Migrations
{
    [DbContext(typeof(ITIDbContext))]
    partial class ITIDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EF_Core02.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("NVARCHAR(350)")
                        .HasColumnName("CourseDescription");

                    b.Property<int>("Duration")
                        .HasColumnType("INT")
                        .HasColumnName("CourseDuration");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARChAR(40)")
                        .HasColumnName("CourseName");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("EF_Core02.Models.Course_Instructor", b =>
                {
                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Evaluation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InstructorId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("Courses_Instructors");
                });

            modelBuilder.Entity("EF_Core02.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateOnly>("HiringDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Date")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int?>("InstructorId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("DepartmentName");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("EF_Core02.Models.Instructor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR(200)");

                    b.Property<double?>("Bonus")
                        .HasColumnType("float");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("HeadedDepartmentId")
                        .HasColumnType("int");

                    b.Property<double>("HourRate")
                        .HasColumnType("float")
                        .HasAnnotation("MaxValue", 12)
                        .HasAnnotation("MinValue", 6);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("InstructorName");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)")
                        .HasAnnotation("MaxValue", 15000)
                        .HasAnnotation("MinValue", 3000);

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId")
                        .IsUnique();

                    b.HasIndex("HeadedDepartmentId");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("EF_Core02.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR(200)")
                        .HasColumnName("StudentAddress");

                    b.Property<int>("Age")
                        .HasColumnType("INT")
                        .HasColumnName("StudentAge")
                        .HasAnnotation("MaxValue", 25)
                        .HasAnnotation("MinValue", 17);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(50)")
                        .HasColumnName("FirstName");

                    b.Property<string>("Lname")
                        .HasColumnType("NVARCHAR(60)")
                        .HasColumnName("LastName");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("EF_Core02.Models.Student_Course", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("Students_Courses");
                });

            modelBuilder.Entity("EF_Core02.Models.Topic", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("TopicName");

                    b.HasKey("Id");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("EF_Core02.Models.Course", b =>
                {
                    b.HasOne("EF_Core02.Models.Topic", "Topic")
                        .WithMany("Courses")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("EF_Core02.Models.Course_Instructor", b =>
                {
                    b.HasOne("EF_Core02.Models.Course", "Course")
                        .WithMany("Courses_Instructors")
                        .HasForeignKey("CourseId");

                    b.HasOne("EF_Core02.Models.Instructor", "Instructor")
                        .WithMany("Courses_Instructors")
                        .HasForeignKey("InstructorId");

                    b.Navigation("Course");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("EF_Core02.Models.Instructor", b =>
                {
                    b.HasOne("EF_Core02.Models.Department", "Department")
                        .WithOne("Instructor")
                        .HasForeignKey("EF_Core02.Models.Instructor", "DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_Core02.Models.Department", "HeadedDepartment")
                        .WithMany()
                        .HasForeignKey("HeadedDepartmentId");

                    b.Navigation("Department");

                    b.Navigation("HeadedDepartment");
                });

            modelBuilder.Entity("EF_Core02.Models.Student", b =>
                {
                    b.HasOne("EF_Core02.Models.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("EF_Core02.Models.Student_Course", b =>
                {
                    b.HasOne("EF_Core02.Models.Course", "Course")
                        .WithMany("students_Courses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_Core02.Models.Student", "Student")
                        .WithMany("Students_Courses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EF_Core02.Models.Course", b =>
                {
                    b.Navigation("Courses_Instructors");

                    b.Navigation("students_Courses");
                });

            modelBuilder.Entity("EF_Core02.Models.Department", b =>
                {
                    b.Navigation("Instructor");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("EF_Core02.Models.Instructor", b =>
                {
                    b.Navigation("Courses_Instructors");
                });

            modelBuilder.Entity("EF_Core02.Models.Student", b =>
                {
                    b.Navigation("Students_Courses");
                });

            modelBuilder.Entity("EF_Core02.Models.Topic", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
